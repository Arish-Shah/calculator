{"version":3,"sources":["components/Calculator/Display/Display.js","components/Calculator/Panel/ButtonRow/ButtonRow.js","components/Calculator/Panel/Button/Button.js","components/Calculator/Panel/Panel.js","components/Calculator/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","operator","react_default","a","createElement","Fragment","className","number","ButtonRow","children","Button","color","join","onClick","clicked","text","type","Panel","map","buttonRow","index","Panel_ButtonRow_ButtonRow","key","button","Panel_Button_Button","Calculator","state","firstNumber","secondNumber","operatorSet","displayNumber","temporaryNumber","clickedHandler","_this","clear","numberHandler","plusMinusHandler","decimalHandler","operatorHandler","calculate","console","log","setState","passedNumber","parseFloat","tempNumber","substr","indexOf","passedOperator","percentageHandler","calculateType","result","setResult","this","Calculator_Display_Display","Calculator_Panel_Panel","Component","App","components_Calculator_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3862dbb3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Display.css';\r\n\r\nconst Display = (props) => {\r\n  let operator = null;\r\n\r\n  if (props.operator) {\r\n    operator = (<span>{props.operator}</span>);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {operator}\r\n      <div className=\"Display\">\r\n        {props.number}&nbsp;\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nconst ButtonRow = (props) => {\r\n  return (\r\n    <div className=\"ButtonRow\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ButtonRow;","import React from 'react';\r\n\r\nconst Button = (props) => {\r\n  let color = ['Button', props.color].join(\" \");\r\n\r\n  return (\r\n    <div className={color} onClick={() => props.clicked(props.text, props.type)}>\r\n      {props.children}\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nimport ButtonRow from './ButtonRow/ButtonRow';\r\nimport Button from './Button/Button';\r\nimport './Panel.css';\r\n\r\nconst Panel = (props) => {\r\n  let buttons = [\r\n    [\r\n      { text: 'C', color: 'gray', type: 'C' },\r\n      { text: '+/-', color: 'gray', type: 'plus/minus' },\r\n      { text: '%', color: 'gray', type: 'operator' },\r\n      { text: 'รท', color: 'orange', type: 'operator' },\r\n    ],\r\n    [\r\n      { text: 7, color: 'white', type: 'number' },\r\n      { text: 8, color: 'white', type: 'number' },\r\n      { text: 9, color: 'white', type: 'number' },\r\n      { text: 'ร', color: 'orange', type: 'operator' }\r\n    ],\r\n    [\r\n      { text: 4, color: 'white', type: 'number' },\r\n      { text: 5, color: 'white', type: 'number' },\r\n      { text: 6, color: 'white', type: 'number' },\r\n      { text: '-', color: 'orange', type: 'operator' }\r\n    ],\r\n    [\r\n      { text: 1, color: 'white', type: 'number' },\r\n      { text: 2, color: 'white', type: 'number' },\r\n      { text: 3, color: 'white', type: 'number' },\r\n      { text: '+', color: 'orange', type: 'operator' }\r\n    ],\r\n    [\r\n      { text: 0, color: 'big-white', type: 'number' },\r\n      { text: '.', color: 'white', type: 'dot' },\r\n      { text: '=', color: 'orange', type: 'equals' }\r\n    ]\r\n  ];\r\n\r\n  return (\r\n    <div className=\"Panel\">\r\n      {\r\n        buttons.map((buttonRow, index) => {\r\n          return (\r\n            <ButtonRow key={index}>\r\n              {\r\n                buttonRow.map(button => {\r\n                  return (\r\n                    <Button\r\n                      key={button.text}\r\n                      text={button.text}\r\n                      color={button.color}\r\n                      type={button.type}\r\n                      clicked={props.clicked}>\r\n                      {button.text}\r\n                    </Button>\r\n                  )\r\n                })\r\n              }\r\n            </ButtonRow>\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Panel;","import React, { Component } from 'react';\r\n\r\nimport Display from './Display/Display';\r\nimport Panel from './Panel/Panel'\r\nimport './Calculator.css';\r\n\r\nclass Calculator extends Component {\r\n  state = {\r\n    firstNumber: 0,\r\n    secondNumber: 0,\r\n    operator: null,\r\n    operatorSet: false,\r\n    displayNumber: '0',\r\n    temporaryNumber: '0'\r\n  }\r\n\r\n  clickedHandler = (text, type) => {\r\n    switch (type) {\r\n      case 'C': this.clear();\r\n        break;\r\n      case 'number': this.numberHandler(text);\r\n        break;\r\n      case 'plus/minus': this.plusMinusHandler();\r\n        break;\r\n      case 'dot': this.decimalHandler();\r\n        break;\r\n      case 'operator': this.operatorHandler(text);\r\n        break;\r\n      case 'equals': this.calculate('equals');\r\n        break;\r\n      default: console.log('unknown button pressed');\r\n    }\r\n  }\r\n\r\n  clear = () => {\r\n    this.setState({\r\n      firstNumber: 0,\r\n      secondNumber: 0,\r\n      operator: null,\r\n      operatorSet: false,\r\n      displayNumber: '0',\r\n      temporaryNumber: '0'\r\n    });\r\n  }\r\n\r\n  numberHandler = (passedNumber) => {\r\n    //Checking if the display number is empty\r\n    let displayNumber = this.state.displayNumber;\r\n    if (displayNumber === \"0\") {\r\n      displayNumber = \"\";\r\n    }\r\n    //Concatenating new number, converting  it and storing it\r\n    displayNumber += passedNumber;\r\n    let number = parseFloat(displayNumber);\r\n\r\n    //Setting states\r\n    this.state.operatorSet ? this.setState({ secondNumber: number }) : this.setState({ firstNumber: number });\r\n    this.setState({ displayNumber: displayNumber });\r\n  }\r\n\r\n  plusMinusHandler = () => {\r\n    let tempNumber = this.state.displayNumber === '0' ? this.state.temporaryNumber : this.state.displayNumber;\r\n\r\n    //Checking if the number is already negative or not\r\n    if (tempNumber.substr(0, 1) === '-') {\r\n      tempNumber = tempNumber.substr(1);\r\n    } else {\r\n      tempNumber = '-' + tempNumber;\r\n    }\r\n    let number = parseFloat(tempNumber);\r\n\r\n    //Setting states\r\n    this.state.operatorSet ? this.setState({ secondNumber: number }) : this.setState({ firstNumber: number });\r\n    this.state.displayNumber === '0' ? this.setState({ temporaryNumber: tempNumber }) : this.setState({ displayNumber: tempNumber });\r\n  }\r\n\r\n  decimalHandler = () => {\r\n    let displayNumber = this.state.displayNumber;\r\n    let index = displayNumber.indexOf('.', 0);\r\n\r\n    if (index === -1) {\r\n      displayNumber += '.';\r\n    }\r\n\r\n    this.setState({ displayNumber: displayNumber });\r\n  }\r\n\r\n  operatorHandler = (passedOperator) => {\r\n    if (passedOperator === '%') {\r\n      this.percentageHandler();\r\n    } else if (this.state.operatorSet) {\r\n      if (this.state.secondNumber === 0) {\r\n        this.setState({\r\n          operator: passedOperator\r\n        });\r\n      } else {\r\n        this.calculate('n0s');\r\n        this.setState({ operator: passedOperator });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        operator: passedOperator,\r\n        operatorSet: true,\r\n        displayNumber: '0',\r\n        temporaryNumber: this.state.firstNumber\r\n      });\r\n    }\r\n  }\r\n\r\n  percentageHandler = () => {\r\n    let number = (this.state.operatorSet ? this.state.secondNumber : this.state.firstNumber) / 100;\r\n\r\n    this.state.operatorSet ?\r\n      this.setState({\r\n        secondNumber: number,\r\n        displayNumber: \"\" + number\r\n      }) :\r\n      this.setState({\r\n        firstNumber: number,\r\n        secondNumber: 0,\r\n        operator: null,\r\n        operatorSet: false,\r\n        displayNumber: \"\" + number\r\n      });\r\n  }\r\n\r\n  calculate = (calculateType) => {\r\n    let result = 0;\r\n\r\n    switch (this.state.operator) {\r\n      case '+': result = this.state.firstNumber + this.state.secondNumber;\r\n        break;\r\n      case '-': result = this.state.firstNumber - this.state.secondNumber;\r\n        break;\r\n      case 'ร': result = this.state.firstNumber * this.state.secondNumber;\r\n        break;\r\n      case 'รท': result = this.state.firstNumber / this.state.secondNumber;\r\n        break;\r\n      default: result = this.state.firstNumber;\r\n    }\r\n    this.setResult(calculateType, result);\r\n  }\r\n\r\n  setResult = (calculateType, result) => {\r\n    if (calculateType === 'equals') {\r\n      this.setState({\r\n        firstNumber: result,\r\n        secondNumber: 0,\r\n        operator: null,\r\n        operatorSet: false,\r\n        displayNumber: '0',\r\n        temporaryNumber: '' + result\r\n      });\r\n    } else if (calculateType === 'n0s') {\r\n      this.setState({\r\n        firstNumber: result,\r\n        secondNumber: 0,\r\n        displayNumber: '0',\r\n        temporaryNumber: '' + result\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let number = this.state.displayNumber === '0' ? this.state.temporaryNumber : this.state.displayNumber;\r\n\r\n    return (\r\n      <div className=\"Calculator\">\r\n        <Display number={number} operator={this.state.operator} />\r\n        <Panel clicked={this.clickedHandler} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\nimport Calculator from './components/Calculator/Calculator';\n\nconst App = () => {\n  return (\n    <React.Fragment>\n      <Calculator />\n    </React.Fragment>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}